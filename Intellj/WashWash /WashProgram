package washprogram;

public class WashProgram {

    private int Weight = 0, IsFilling = 0, TypeClothing = 0, WashingComplete = 0, DryingComplete = 0;
    // It's good to declare the variables as private to prevent programmers from accessing them directly.

    public WashProgram(int Weight, int TypeClothing) {
        this.Weight = Weight; // this.weight refers to the class variable of here this one place; weight refers to the constructor parameter
        this.TypeClothing = TypeClothing; // same logic applies here
    }

    private void fillwater() {  // this method is used for filling water
        if (Weight <= 15) { // conditional: if weight <= 15kg, the washing machine can fill with water
            IsFilling = 1; // assign value 1 to completefilling to use it later
            System.out.println("Filling..."); // print to console: Filling...
            System.out.println("Filling complete"); // print to console: Filling complete
        } else { // conditional: if weight > 15kg, the washing machine cannot fill with water
            System.out.println("The washing machine cannot hold more than 15 kg of clothes"); // print this message to console
        }
    }

    private void wash() { // this method is used for washing
        fillwater(); // call the fillwater method to check if the machine can fill with water, look at the fillwater method above

        // conditional: if IsFilling == 1, the washing machine can wash
        // because it has successfully filled with water
        // if false, it cannot wash because the weight exceeds the limit

        if (IsFilling == 1) {
            if (TypeClothing == 1) { // if typeClothing == 1, perform gentle wash
                System.out.println("White clothes / gentle wash"); // print to console
                System.out.println("Washing..."); // print to console
                WashingComplete = 1; // mark washing as complete
            } else if (TypeClothing == 2) { // if typeClothing == 2, perform normal wash
                System.out.println("Colored clothes / normal wash"); // print to console
                System.out.println("Washing..."); // print to console
                WashingComplete = 1;
            } else if (TypeClothing == 3) { // if typeClothing == 3, perform strong wash
                System.out.println("Jeans / strong wash"); // print to console
                System.out.println("Washing..."); // print to console
                WashingComplete = 1;
            } else { // if typeClothing is not 1, 2, or 3, perform default wash
                System.out.println("The type of clothing is not valid"); // print to console
                System.out.println("It's going to be a normal wash"); // print to console
                WashingComplete = 1;
            }
        }
    }

    private void Drying() {  // this method is used for drying
        wash();  // call the wash method to check if the machine can proceed to drying
        if (WashingComplete == 1) {  // if washing is complete, proceed to drying
            System.out.println("Drying...");  // print to console
            DryingComplete = 1;  // mark drying as complete
        }
    }

    public void CycleCompleted() {  // this method is public so programmers can use it
        Drying();    // call the Drying method to continue the cycle

        // conditional: if dryingComplete == 1, the washing machine has completed the cycle
        // otherwise, it cannot complete the cycle due to excess weight or failed washing

        if (DryingComplete == 1) {
            System.out.println("Cycle completed\nYour clothes are ready");  // print to console
        }
    }


// use of setter and getter methods for encapsulation and practices

    public int getTypeClothing() { //  getter method for weight it,s needed to access the private variable weight and your type value int
        return TypeClothing; //always write return statement in getter method for returning the value
    }
    public void setTypeClothing(int TypeClothing) { // setter method needed the use of void because it does not return any value by itself
        this.TypeClothing = TypeClothing; // the use of this keyword is to distinguish between the class variable and the parameter variable
                                           // here this.TypeClothing refers to the class variable and TypeClothing refers to the parameter variable
